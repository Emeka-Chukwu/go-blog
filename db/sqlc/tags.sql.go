// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: tags.sql

package db

import (
	"context"
)

const createTags = `-- name: CreateTags :one
INSERT INTO tags (
    id,
  name
) VALUES (
  $1, $2
) RETURNING id, name, created_at, updated_at
`

type CreateTagsParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreateTags(ctx context.Context, arg CreateTagsParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTags, arg.ID, arg.Name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const getTagId = `-- name: GetTagId :one
SELECT id, name, created_at, updated_at FROM tags WHERE id = $1
`

func (q *Queries) GetTagId(ctx context.Context, id int32) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagId, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTags = `-- name: GetTags :many
SELECT id, name, created_at, updated_at FROM tags
`

func (q *Queries) GetTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :one
UPDATE tags
SET
 name = $1
WHERE
  id = $2
RETURNING id, name, created_at, updated_at
`

type UpdateTagParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, updateTag, arg.Name, arg.ID)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
