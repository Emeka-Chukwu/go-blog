// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: posts.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  title,
  content,
  author_id,
  category_id
) VALUES (
  $1, $2, $3, $4 
) RETURNING id, title, content, author_id, category_id, created_at, updated_at
`

type CreatePostParams struct {
	Title      string `json:"title"`
	Content    string `json:"content"`
	AuthorID   int32  `json:"author_id"`
	CategoryID int32  `json:"category_id"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Content,
		arg.AuthorID,
		arg.CategoryID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePosts = `-- name: DeletePosts :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePosts(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePosts, id)
	return err
}

const getPostById = `-- name: GetPostById :one
SELECT id, title, content, author_id, category_id, created_at, updated_at FROM posts WHERE id = $1
`

func (q *Queries) GetPostById(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, title, content, author_id, category_id, created_at, updated_at FROM posts ORDER BY id
LIMIT $1
OFFSET $2
`

type GetPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPosts(ctx context.Context, arg GetPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.AuthorID,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostWithComment = `-- name: ListPostWithComment :many
SELECT p.id, p.title, p.content, p.author_id, p.category_id, p.created_at, p.updated_at, json_agg(c.*) AS comments
FROM posts p
LEFT JOIN comments c ON c.post_id = p.id
GROUP BY p.id LIMIT $1
OFFSET $2
`

type ListPostWithCommentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListPostWithCommentRow struct {
	ID         int32           `json:"id"`
	Title      string          `json:"title"`
	Content    string          `json:"content"`
	AuthorID   int32           `json:"author_id"`
	CategoryID int32           `json:"category_id"`
	CreatedAt  time.Time       `json:"created_at"`
	UpdatedAt  time.Time       `json:"updated_at"`
	Comments   json.RawMessage `json:"comments"`
}

func (q *Queries) ListPostWithComment(ctx context.Context, arg ListPostWithCommentParams) ([]ListPostWithCommentRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostWithComment, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostWithCommentRow{}
	for rows.Next() {
		var i ListPostWithCommentRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.AuthorID,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Comments,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostWithCommentAndTags = `-- name: ListPostWithCommentAndTags :many
SELECT p.id, p.title, p.content, p.author_id, p.category_id, p.created_at, p.updated_at, json_agg(c.*) AS comments, json_agg(t.tags) AS tags
FROM posts p
LEFT JOIN comments c ON c.post_id = p.id
LEFT JOIN post_tags pt ON pt.post_id = p.id
LEFT JOIN tags t ON t.id = pt.tag_id
GROUP BY p.id, p.title
`

type ListPostWithCommentAndTagsRow struct {
	ID         int32           `json:"id"`
	Title      string          `json:"title"`
	Content    string          `json:"content"`
	AuthorID   int32           `json:"author_id"`
	CategoryID int32           `json:"category_id"`
	CreatedAt  time.Time       `json:"created_at"`
	UpdatedAt  time.Time       `json:"updated_at"`
	Comments   json.RawMessage `json:"comments"`
	Tags       json.RawMessage `json:"tags"`
}

func (q *Queries) ListPostWithCommentAndTags(ctx context.Context) ([]ListPostWithCommentAndTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostWithCommentAndTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostWithCommentAndTagsRow{}
	for rows.Next() {
		var i ListPostWithCommentAndTagsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.AuthorID,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Comments,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET
 title = COALESCE($2, title),
 content= COALESCE($3, content),
 category_id= COALESCE($4, category_id)
WHERE
  id = $5 AND author_id = $1
RETURNING id, title, content, author_id, category_id, created_at, updated_at
`

type UpdatePostParams struct {
	AuthorID   int32          `json:"author_id"`
	Title      sql.NullString `json:"title"`
	Content    sql.NullString `json:"content"`
	CategoryID sql.NullInt32  `json:"category_id"`
	ID         int32          `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.AuthorID,
		arg.Title,
		arg.Content,
		arg.CategoryID,
		arg.ID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
